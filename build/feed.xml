<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>let blog: Blog = Blog()</title>
  <subtitle>let blog: Blog = Blog()</subtitle>
  <id>http://wjlafrance.net/</id>
  <link href="http://wjlafrance.net/"/>
  <link href="http://wjlafrance.net/feed.xml" rel="self"/>
  <updated>2015-02-11T18:00:00-06:00</updated>
  <author>
    <name>William LaFrance</name>
  </author>
  <entry>
    <title>I'll be there soon - a future self in Swift</title>
    <link rel="alternate" href="http://wjlafrance.net/2015/02/12/ill-be-there-soon-future-self-in-swift/"/>
    <id>http://wjlafrance.net/2015/02/12/ill-be-there-soon-future-self-in-swift/</id>
    <published>2015-02-11T18:00:00-06:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;Working with Cocoa APIs in Swift is a mostly pleasant experience, even more so with the &lt;a href="https://developer.apple.com/swift/blog/?id=22"&gt;upcoming Objective-C changes&lt;/a&gt; to express nullability.&lt;/p&gt;

&lt;p&gt;There's one case that really irks me though:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import CoreBluetooth

class MyBluetoothClass: CBCentralManagerDelegate {

    let centralManager: CBCentralManager

    init() {
        centralManager = CBCentralManager(delegate: nil, queue: dispatch_get_main_queue())
        super.init()
        centralManager.delegate = self
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, &lt;code&gt;CBCentralManager&lt;/code&gt;'s constructor takes a delegate. In Objective-C I usually unsafely pass &lt;code&gt;self&lt;/code&gt;. This is unsafe because &lt;code&gt;-initWithDelegate:queue:)&lt;/code&gt; has the ability to send messages to us before we finish our initialization. In practice, we know that it doesn't, so we just ignore the safety rules and do it anyhow.&lt;/p&gt;

&lt;p&gt;Swift won't let you allow that.&lt;/p&gt;

&lt;p&gt;A possible solution would be to introduce the concept of a future or promised self. It would behave like an ARC weak reference, being &lt;code&gt;nil&lt;/code&gt; when unable to be messaged, with an additional feature: until initialization finishes the passed object can not be resolved.&lt;/p&gt;

&lt;p&gt;I'm not sure exactly how this would work into the language's syntax, but consider how it would impact the above example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import CoreBluetooth

class MyBluetoothClass: CBCentralManagerDelegate {

    let centralManager = CBCentralManager(delegate: futureSelf, queue: dispatch_get_main_queue())

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please feel free to discuss this idea on Twitter, where you can find me &lt;a href="http://twitter.com/wjlafrance"&gt;@wjlafrance&lt;/a&gt;. I'd like to hear any possible implementation details, or flaws with the concept.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a NeXTstation display cable</title>
    <link rel="alternate" href="http://wjlafrance.net/2014/08/04/building-a-nextstation-display-cable/"/>
    <id>http://wjlafrance.net/2014/08/04/building-a-nextstation-display-cable/</id>
    <published>2014-08-03T19:00:00-05:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;A friend recently gave me a &lt;a href="http://en.wikipedia.org/wiki/NeXTstation"&gt;NeXTstation&lt;/a&gt; (c. 1991) that he didn't want to take with him on his move across the country. In the decade since the computer was last used, he misplaced the &lt;a href="http://en.wikipedia.org/wiki/D-subminiature"&gt;DB-19&lt;/a&gt; display cable. These cables are very hard to come by two decades after the machine was end-of-lifed, so I made my own. (The NeXT computers that supported color used standard &lt;a href="http://en.wikipedia.org/wiki/DB13W3"&gt;DB13W3 cables&lt;/a&gt;.) I took photos of the build process and &lt;a href="https://www.flickr.com/photos/125880274@N03/sets/72157646178769114/"&gt;posted them on Flickr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Starting with two DB-25 Male D-Sub connectors (&lt;a href="http://www.radioshack.com/product/index.jsp?productId=2103239"&gt;RadioShack 276-1547&lt;/a&gt;), I used two pairs of pliers to twist until the shells separated, then &lt;a href="http://www.urbandictionary.com/define.php?term=Macgyver"&gt;pried them apart with a flat-head screwdriver&lt;/a&gt;. Inside there are two pieces of plastic holding the 25 pins. After carefully pulling these apart so the pins didn't go flying, I removed 6 pins on one side and put the plastic together creating a D-sub shaped 19-pin connector. I didn't have a tool handy at the time to cut the extra plastic, though I've since bought a &lt;a href="http://www.harborfreight.com/power-tools/rotary-tools.html"&gt;off-brand Dremel at Harbor Freight&lt;/a&gt; for $10. Since the shell was destroyed, I taped the metal pieces back together.&lt;/p&gt;

&lt;p&gt;Next, I cut 18 connecting wires roughly 8" long, as the monitor sits directly on top of the NeXTstation. You'll need longer wires to reach from a &lt;a href="http://en.wikipedia.org/wiki/Next_cube"&gt;NeXTcube&lt;/a&gt;. I used &lt;a href="http://www.radioshack.com/product/index.jsp?productId=2049745"&gt;standard 22-gauge hookup wire&lt;/a&gt;, although the connector accommodates up to 20-gauge. I first soldered in the two +12/-12 pins and pin 6 (power button), as that's all that's necessary to test the machine's power supply. After that checked out, I soldered the rest, using black for data, red for power, and green for ground. Obviously, use whatever colors you'd like.&lt;/p&gt;

&lt;p&gt;After all the wires were in place I booted the machine again and was greeted with the NeXT ROM Manager. Unfortunately the hard drive failed, probably some years ago, but the cable carries video, audio, and key presses. May it serve well for the NeXT 23 years.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Implementing Binary Protocols in Swift (Part 1)</title>
    <link rel="alternate" href="http://wjlafrance.net/2014/06/27/implementing-binary-protocols-in-swift-pt1/"/>
    <id>http://wjlafrance.net/2014/06/27/implementing-binary-protocols-in-swift-pt1/</id>
    <published>2014-06-26T19:00:00-05:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;Many people in our community have played great titles such as &lt;a href="http://us.blizzard.com/en-us/games/d2/"&gt;Diablo II&lt;/a&gt; and &lt;a href="http://us.blizzard.com/en-us/games/war3/"&gt;WarCraft III&lt;/a&gt;. During the mid-2000s, there was a small community of young developers building third-party chat clients for the &lt;a href="https://en.wikipedia.org/wiki/Battle.net"&gt;Battle.net&lt;/a&gt; gaming and matchmaking service. The most famous of these clients, &lt;a href="http://www.stealthbot.net/wiki/StealthBot"&gt;StealthBot&lt;/a&gt;, was developed right here in Madison, WI.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;These games shared a protocol for communicating with the Battle.net chat servers (frequently called "BNCS"), which was reverse engineered and thoroughly documented at a website called BnetDocs. The original site has long since disappeared from the internet, but a mirror with updated content can be found &lt;a href="https://bnetdocs.org/"&gt;here&lt;/a&gt;. There are several data types used in the protocol, described &lt;a href="https://bnetdocs.org/?op=doc&amp;amp;did=19"&gt;here&lt;/a&gt;, that we'd like to implement in Swift.&lt;/p&gt;

&lt;p&gt;The protocol mostly consists of writing integers from memory straight to a socket. Heres how I &lt;a href="https://raw.githubusercontent.com/wjlafrance/bnetclient/01bf4abb2171e74aa1326edb73778ac7e3b0049c/BnetClient/NSMutableData+PacketBuffer.m"&gt;implemented this in Objective-C&lt;/a&gt;, as a category on &lt;code&gt;NSMutableData&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define PUSH_INT [self appendBytes:&amp;amp;value length:sizeof(value)];
- (void)writeUInt8:(uint8_t)value { PUSH_INT }
- (void)writeUInt16:(uint16_t)value { PUSH_INT }
- (void)writeUInt32:(uint32_t)value { PUSH_INT }
- (void)writeUInt64:(uint64_t)value { PUSH_INT }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To expand that macro for readability:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)writeUInt8:(uint8_t)value {
    [self appendBytes:&amp;amp;value length:sizeof(uint8_t)];
}
- (void)writeUInt16:(uint16_t)value {
    [self appendBytes:&amp;amp;value length:sizeof(uint16_t)];
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique, while consise, treats integers as &lt;code&gt;void*&lt;/code&gt; in an unsafe way. How can we implement this in Swift? Rather than build on top of &lt;code&gt;NSMutableData&lt;/code&gt;, I decided to define my buffer as a concrete class, wrapping an &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Buffer : Printable {
    var contents: Array&amp;lt;UInt8&amp;gt; = []

    func add(value: UInt8) {
        contents.append(value)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a &lt;code&gt;UInt8&lt;/code&gt; into the array works nicely, but with larger integers we need to be deliberate about what order the bytes are added. Additionally, we need to ensure that we don't overflow, which would cause a runtime exception in Swift rather than simple truncation in C. To keep methods short, I split each integer into it's upper and lower half and call the method for the next smaller size.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    func add(value: UInt16) {
        add(UInt8(value &amp;gt;&amp;gt; 8 &amp;amp; 0xFF))
        add(UInt8(value &amp;gt;&amp;gt; 0 &amp;amp; 0xFF))
    }
    
    func add(value: UInt32) {
        add(UInt16(value &amp;gt;&amp;gt; 16 &amp;amp; 0xFFFF))
        add(UInt16(value &amp;gt;&amp;gt;  0 &amp;amp; 0xFFFF))
    }
    
    func add(value: UInt64) {
        add(UInt32(value &amp;gt;&amp;gt; 32 &amp;amp; 0xFFFFFFFF))
        add(UInt32(value &amp;gt;&amp;gt;  0 &amp;amp; 0xFFFFFFFF))
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading integers back from the buffer is essentially the opposite operation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    func readUInt8() -&amp;gt; UInt8 {
        return contents.removeAtIndex(0)
    }
    
    func readUInt16() -&amp;gt; UInt16 {
        return UInt16(readUInt8()) &amp;lt;&amp;lt; 8 | UInt16(readUInt8())
    }
    
    func readUInt32() -&amp;gt; UInt32 {
        return UInt32(readUInt16()) &amp;lt;&amp;lt; 16 | UInt32(readUInt16())
    }
    
    func readUInt64() -&amp;gt; UInt64 {
        return UInt64(readUInt32()) &amp;lt;&amp;lt; 32 | UInt64(readUInt32())
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation is still incomplete. Next week, I should have a working example of connecting to Battle.net and emulating the original Diablo client. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I can see my language from here!</title>
    <link rel="alternate" href="http://wjlafrance.net/2014/06/19/i-can-see-my-language/"/>
    <id>http://wjlafrance.net/2014/06/19/i-can-see-my-language/</id>
    <published>2014-06-18T19:00:00-05:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;When Apple announced &lt;a href="https://en.wikipedia.org/wiki/Swift_(programming_language)"&gt;Swift&lt;/a&gt; one of the first things I heard was "hey, they copied &lt;em&gt;feature&lt;/em&gt; from &lt;em&gt;language&lt;/em&gt;!" Wikipedia lists Objective-C, Rust, Haskell, Ruby, Python, C#, and CLU as the language's influencers, so it's not surprising that everyone sees something from their favorite language.&lt;/p&gt;

&lt;p&gt;Let's take a look at various code samples in different languages and see how they compare to Swift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It would be a violation of software tradition to not start with hello world.&lt;/p&gt;

&lt;p&gt;Scala:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println("Hello, world!")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println("Hello, world!")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that's identical. How about constant and variable declarations and functions?&lt;/p&gt;

&lt;p&gt;Scala:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val explicitlyTypedConst: String = "you can't modify this!"

def createGreeting(name: String): String = {
    return s"hello $name"
}

val formatArg = "world"
var formattedString = createGreeting(formatArg)
println(formattedString)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let explicitlyTypedConst: String = "you can't modify this!"

func createGreeting(name: String) -&amp;gt; String {
    return "hello \(name)"
}

let formatArg = "world"
var formattedString = createGreeting(formatArg)
println(formattedString)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's a lot of similarities here. We see the syntax of declarations is the exact same, taking the declaration keyword (&lt;code&gt;let&lt;/code&gt; or &lt;code&gt;val&lt;/code&gt; for a constant, and &lt;code&gt;var&lt;/code&gt; for a variable) then the name, followed optionally by a colon and the type, then an assignment.&lt;/p&gt;

&lt;p&gt;The function syntax is slightly different. In Scala, you specify the function's return type using &lt;code&gt;: Type&lt;/code&gt; as you do with variables, whereas in Swift you specify return types using &lt;code&gt;-&amp;gt; Type&lt;/code&gt;. The presence of the equals sign in Scala is another interesting difference.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One of my favorite features of the language is the syntax for properties. I'm a big fan of this syntax because it keeps your setters and getters clearly connected to eachother. I don't have a C# compiler handy, so let's borrow &lt;a href="http://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx"&gt;an example from MSDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;C#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TimePeriod {
    private double seconds;

    public double Hours {
        get {
            return seconds / 3600;
        }
        set {
            seconds = value * 3600;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TimePeriod {
    var seconds: Int = 0
    
    var hours: Int {
        get {
            return seconds / 3600
        }
        set(newHours) {
            seconds = newHours * 3600
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;But constructing an entire TimePeriod class for this purpose seems a little Javaish. Those coming from Rails might be expecting to type &lt;code&gt;5.minutes&lt;/code&gt;, a convenience added onto Ruby's &lt;code&gt;FixNum&lt;/code&gt;. Let's &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey patch&lt;/a&gt; Swift's &lt;code&gt;Int&lt;/code&gt; by adding read-only properties.&lt;/p&gt;

&lt;p&gt;Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Int {
    var milliseconds: Int { return self; }
    var seconds: Int { return self.milliseconds * 1000 }
    var minutes: Int { return self.seconds * 60 }
    var hours: Int { return self.minutes * 60 }
}

let timeInterval = 3.hours + 2.minutes + 15.seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;One of the most common tasks I find myself doing is iterating over a collection. Let's say hello to everyone.&lt;/p&gt;

&lt;p&gt;Java:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; people = ImmutableList.of("Alice", "Bob", "Charlie", "Deb");
for (String person : people) {
    System.out.format("Hello %s\n", person);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSArray *people = @["Alice", "Bob", "Charlie", "Deb"];
for (NSString *person in people) {
    NSLog(@"Hello, %@", person);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let people = ["Alice", "Bob", "Charlie", "Deb"]
for person in people {
    println("Hello \(person)")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we see the same basic syntax, using the &lt;code&gt;for&lt;/code&gt; keyword, indicating the variable name we'd like each element to be exposed to our loop body as, the collection we're iterating, and then the action to take for each element.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Tuples are a feature that I haven't seen commonly. Here's a classic example of swapping two integers using a temporary storage.&lt;/p&gt;

&lt;p&gt;C:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void swap(int *a, int *b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

int main(int argc, char **argv) {
    int a = 15;
    int b = 30;
    swap(&amp;amp;a, &amp;amp;b);
    printf("a = %d, b = %d\n", a, b);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this code we're passing two integers by-reference into another function. The &lt;code&gt;swap&lt;/code&gt; function is not generic and can only swap &lt;code&gt;int&lt;/code&gt;s as well. We can take advantage of Ruby's tuples to swap variables very easily.&lt;/p&gt;

&lt;p&gt;Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 15
b = 30
b, a = a, b
puts "a = #{a}, b = #{b}"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift incorporates this syntax as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 15
var b = 30
(b, a) = (a, b)
println("a = \(a), b = \(b)")
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you've enjoyed this very brief tour of some language features in Swift. If you look at Swift and see your favorite language in there somewhere, you're not alone.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Middleman Blog Engine</title>
    <link rel="alternate" href="http://wjlafrance.net/2014/06/12/middleman-blog-engine/"/>
    <id>http://wjlafrance.net/2014/06/12/middleman-blog-engine/</id>
    <published>2014-06-11T19:00:00-05:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;When I decided to start this project I knew I needed a way to easily write articles and view them locally. Since static websites are the latest craze, and can be hosted almost anywhere, I did a bit of searching and found the &lt;a href="https://github.com/middleman/middleman-blog"&gt;blog&lt;/a&gt; extension for &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. I also found a guide on running &lt;a href="http://randomerrata.com/post/56163474367/middleman-on-heroku"&gt;Middleman on Heroku&lt;/a&gt;. I decided that since I'm already managing my blog with Git, I might as well post the whole thing &lt;a href="https://github.com/wjlafrance/blog"&gt;on Github&lt;/a&gt; so you can see my configuration.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in playing around with this blog engine, go ahead and download my blog. This assumes you have &lt;a href="http://rvm.io/"&gt;rvm&lt;/a&gt; (Ruby Version Manager) installed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:wjlafrance/blog.git
$ cd blog
$ rvm install 2.1.1
$ rvm use 2.1.1
$ gem install bundler &amp;amp;&amp;amp; bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a new article is easy. There's no fancy script. I just &lt;code&gt;touch&lt;/code&gt; a file, open the directory in &lt;a href="http://www.sublimetext.com/"&gt;my favorite editor&lt;/a&gt;, and run Middleman's embedded server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[lafrance@alaska ~/dev/blog]$ touch source/2014-06-12-middleman-blog-engine.html.markdown
[lafrance@alaska ~/dev/blog]$ subl .
[lafrance@alaska ~/dev/blog]$ middleman
== The Middleman is loading
== The Middleman is standing watch at http://0.0.0.0:4567
== Inspect your site configuration at http://0.0.0.0:4567/__middleman/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your browser to the &lt;a href="http://127.0.0.1:4567"&gt;site Middleman is hosting&lt;/a&gt; and you should be looking at your new blog.&lt;/p&gt;

&lt;p&gt;I'm still working on perfecting the layout and style, as I don't want this blog to betray the fact that it was &lt;a href="http://en.wikipedia.org/wiki/Programmer_art"&gt;created by a developer with no designer help&lt;/a&gt;. I welcome any pull requests on Github with improvements, whether technical, visual, or even grammatical.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and I'll see you next week!&lt;/p&gt;

&lt;p&gt;(PS: If you're curious why my computer is no longer named &lt;code&gt;defiant&lt;/code&gt;, there's a few reasons. My SSD wore out, so I had to break my &lt;a href="/2012/11/02/setting-up-fusion-disk-on-an-older-mac/"&gt;Fusion Drive&lt;/a&gt;, and decided to do a clean install of OS X. I've also been short on starships lately, so I've decided that I'll now name my devices after places, which I swear I didn't copy from Apple. I'm about 90% of the way though the excellent book &lt;a href="http://en.wikipedia.org/wiki/Looking_for_Alaska"&gt;Looking For Alaska&lt;/a&gt;, so I named my computer &lt;code&gt;alaska&lt;/code&gt;. That way, if I ever misplace it I'll literally be looking for Alaska.)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>A New Project</title>
    <link rel="alternate" href="http://wjlafrance.net/2014/06/10/a-new-project/"/>
    <id>http://wjlafrance.net/2014/06/10/a-new-project/</id>
    <published>2014-06-09T19:00:00-05:00</published>
    <updated>2019-01-01T20:04:08-06:00</updated>
    <author>
      <name>William LaFrance</name>
    </author>
    <content type="html">&lt;p&gt;I'm starting a new project.&lt;/p&gt;

&lt;p&gt;If you've used the internet, you may have heard of &lt;a href="https://en.wikipedia.org/wiki/John_Green_(author)"&gt;John&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Hank_Green"&gt;Hank Green&lt;/a&gt;, the &lt;a href="https://en.wikipedia.org/wiki/VlogBrothers"&gt;VlogBrothers&lt;/a&gt;. If you haven't heard of them by that name, you've probably at least seen one of &lt;a href="https://www.youtube.com/user/vlogbrothers"&gt;their videos on YouTube&lt;/a&gt;. They started a project on the &lt;a href="https://www.youtube.com/watch?v=vtyXbTHKhI0"&gt;first day&lt;/a&gt; of 2007, called &lt;em&gt;&lt;a href="http://nerdfighteria.info/entry/1116"&gt;Brotherhood 2.0&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The project was for John and Hank to rebuild their relationship, which they left behind when they moved away from home, as most siblings do these days. They would take turns, each week day, making a video roughly 3 to 4 minutes long, talking to the other brother. If they missed a day, or communicated via text (email, instant message, etc) they would be &lt;a href="https://www.youtube.com/watch?v=ptjMRDUX744"&gt;punished&lt;/a&gt;, which happened fairly regularly. Throughout the project, the brothers would give each other challenges, and one challenge was for Hank to write and perform a new song every Wednesday on which he made a video. He &lt;a href="https://www.youtube.com/watch?v=CvvFiZyEyTA"&gt;accomplished this challenge&lt;/a&gt;, and released &lt;a href="https://itunes.apple.com/us/album/so-jokes/id303875663"&gt;his first album&lt;/a&gt; in 2009.&lt;/p&gt;

&lt;p&gt;I'm not sure if I'll accomplish the same greatness, but since I haven't written in over half a year, so I think it's time that I give myself some constraints. My new project is to write an article every week. Like Brotherhood 2.0, I'm going to have rules as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I must publish one new article every week.&lt;/li&gt;
  &lt;li&gt;I can write about whatever I want. (This will generally be about technology-related things, mostly cause I don't know about anything else.)&lt;/li&gt;
  &lt;li&gt;There are no rollover points for publishing more than one article per week.&lt;/li&gt;
  &lt;li&gt;I can't start preparing an article early (prior to Friday) other than coming up with ideas.&lt;/li&gt;
  &lt;li&gt;The due date is each Friday at 9AM CST. I can begin working on the next article immediately afterward.&lt;/li&gt;
  &lt;li&gt;This article doesn't count for this week, so I'm already starting with a half-week disadvantage.&lt;/li&gt;
  &lt;li&gt;As my punishment, I expect to be called out on social networks if I miss my deadline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm planning for this project to start out lasting 2 months, for a total of 9 articles. You're probably asking, "Why all the hubbub for such a small project? Why wouldn't you make it longer if you really want to do it?" I'll let &lt;a href="https://www.youtube.com/watch?v=XN4sxxYXFb4"&gt;John explain&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hank, I think it's safe to say that as much as we've enjoyed this project with each other, we never would've finished if people hadn't watched. First, because it was hard, and second, because I love not to finish stuff.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is just a trial period. If I receive feedback (negative or positive, as long as it's constructive!) I'd like to continue indefinitely.&lt;/p&gt;

&lt;p&gt;I'll be announcing new articles &lt;a href="http://alpha.app.net/wjl"&gt;on App.net&lt;/a&gt; as I post them, and I invite you to comment there. This site will probably be moving to replace &lt;a href="http://wjlafrance.net"&gt;my old blog&lt;/a&gt; on my domain name pretty soon.&lt;/p&gt;
</content>
  </entry>
</feed>
